{"version":3,"sources":["Assets/movie.png","Components/MovieList.js","Containers/MovieListView.js","Components/MovieDetail.js","Containers/MovieDetailView.js","Containers/FavoriteMovies.js","Containers/Layout.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieList","style","marginLeft","marginRight","dataSource","this","props","data","renderItem","item","Item","key","title","extra","href","imdbID","width","alt","src","Poster","Meta","avatar","Title","description","Year","Component","MovieListView","state","movies","axios","get","process","then","res","setState","e","target","value","name","placeholder","className","suffix","type","onChange","bind","MovieDetail","movie","Grid","Released","Rated","Type","Director","Country","imdbRating","Metascore","Awards","Plot","Actors","Production","MovieDetailView","onChangeAddFavorite","event","JSON","stringify","localStorage","setItem","alert","onChangeRemoveFavorite","removeItem","favorite","movieID","match","params","getItem","disabled","onClick","FavoriteMovies","values","keys","Object","i","length","push","parse","Header","Layout","CustomLayout","theme","mode","lineHeight","to","logo","height","BaseRouter","basename","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.74272329.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/movie.af39d232.png\";","import React, { Component } from 'react';\r\nimport { List, Avatar } from 'antd';\r\n\r\nclass MovieList extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <List\r\n                    style={{ marginLeft:\"5%\", marginRight:\"5%\" }}\r\n                    dataSource={this.props.data}\r\n                    renderItem={item => (\r\n                        <List.Item\r\n                            key={item.title}\r\n                            extra={<a href={`/${item.imdbID}`}><img width={100} alt=\"Poster\" src={item.Poster}/></a>}\r\n                        >\r\n                        <List.Item.Meta\r\n                            avatar={<a href={`/${item.imdbID}`}><Avatar src={item.Poster} /></a>}\r\n                            title={<a href={`/${item.imdbID}`}>{item.Title}</a>}\r\n                            description={item.Year}\r\n                        />\r\n                    </List.Item>\r\n                    )}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default MovieList;","import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport MovieList from '../Components/MovieList';\r\nimport { Icon, Input } from 'antd';\r\n\r\nclass MovieListView extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            movies: []\r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const API_KEY = process.env.REACT_APP_IMDB_API_KEY;\r\n        const API_URL = process.env.REACT_APP_IMDB_URL;\r\n        axios.get(`${API_URL}?apikey=${API_KEY}`)\r\n            .then(res => {\r\n                if (!res.data[\"Error\"]) {\r\n                    this.setState({\r\n                        movies: [res.data]\r\n                    })    \r\n                }else{\r\n                    this.setState({\r\n                        movies: []\r\n                    }) \r\n                }\r\n            })\r\n    }\r\n\r\n    onChange(e){\r\n        const API_KEY = process.env.REACT_APP_IMDB_API_KEY;\r\n        const API_URL = process.env.REACT_APP_IMDB_URL;\r\n        axios.get(`${API_URL}?apikey=${API_KEY}&t=${e.target.value}`)\r\n            .then(res => {\r\n                if (!res.data[\"Error\"]) {\r\n                    this.setState({\r\n                        movies: [res.data]\r\n                    })    \r\n                }else{\r\n                    this.setState({\r\n                        movies: []\r\n                    }) \r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return  (\r\n            <div>\r\n                <center><Input\r\n                    name=\"input\"\r\n                    placeholder=\"Favor ingrese nombre de pelicula\"\r\n                    className=\"certain-category-icon\"\r\n                    style={{ width: '50%' }}\r\n                    suffix={<Icon type=\"search\"/>}\r\n                    onChange={this.onChange.bind(this)}\r\n                /></center>\r\n                <MovieList data={this.state.movies}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieListView;","import React, { Component } from \"react\";\r\nimport { Card } from 'antd';\r\n\r\n\r\nclass MovieDetail extends Component {\r\n    render() {\r\n        return  (\r\n            <div>\r\n                <Card title = {this.props.movie.Title}>\r\n                    <Card.Grid>\r\n                        <b>AÃ±o: </b> {this.props.movie.Year}\r\n                    </Card.Grid>\r\n                    <Card.Grid>\r\n                        <b>Publicacion: </b> {this.props.movie.Released}\r\n                    </Card.Grid>\r\n                    <Card.Grid>\r\n                        <b>Clasificacion: </b> {this.props.movie.Rated}\r\n                    </Card.Grid>\r\n                    <Card.Grid>\r\n                        <b>Tipo: </b> {this.props.movie.Type}\r\n                    </Card.Grid>\r\n                    <Card.Grid>\r\n                        <b>Director: </b> {this.props.movie.Director}\r\n                    </Card.Grid>\r\n                    <Card.Grid>\r\n                        <b>Pais: </b> {this.props.movie.Country}\r\n                    </Card.Grid>\r\n                    <Card.Grid>\r\n                        <b>Calificacion imdb: </b> {this.props.movie.imdbRating}\r\n                    </Card.Grid>\r\n                    <Card.Grid>\r\n                        <b>Puntuacion: </b> {this.props.movie.Metascore}\r\n                    </Card.Grid>\r\n                    <Card.Grid>\r\n                        <b>Premios: </b> {this.props.movie.Awards}\r\n                    </Card.Grid>\r\n                </Card>\r\n                <Card>\r\n                    <b>Trama: </b> {this.props.movie.Plot}\r\n                </Card>\r\n                <Card>\r\n                    <b>Actores: </b> {this.props.movie.Actors}\r\n                </Card>\r\n                <Card>\r\n                    <b>Produccion: </b> {this.props.movie.Production}\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieDetail;","import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport { Button } from 'antd';\r\nimport MovieDetail from '../Components/MovieDetail'\r\n\r\n\r\nclass MovieDetailView extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            movie: [],\r\n            favorite: false\r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const movieID = this.props.match.params.movieID;\r\n        const API_KEY = process.env.REACT_APP_IMDB_API_KEY;\r\n        const API_URL = process.env.REACT_APP_IMDB_URL;\r\n        axios.get(`${API_URL}?apikey=${API_KEY}&i=${movieID}`)\r\n            .then(res => {\r\n                this.setState({\r\n                    movie: res.data\r\n                })\r\n                const data = localStorage.getItem(this.state.movie.imdbID)\r\n                if (data === null) {\r\n                    this.setState({\r\n                        favorite: false\r\n                    })\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        favorite: true\r\n                    })\r\n                }\r\n            })\r\n    }\r\n\r\n    onChangeAddFavorite = event => {\r\n        const data = JSON.stringify(this.state.movie);\r\n        localStorage.setItem(this.state.movie.imdbID,data)\r\n        alert(\"PelÃ­cula agregada a favoritos\");\r\n    };\r\n\r\n    onChangeRemoveFavorite = event => {\r\n        localStorage.removeItem(this.state.movie.imdbID)\r\n        alert(\"PelÃ­cula eliminada a favoritos\");\r\n    };\r\n\r\n    render() {\r\n        return  (\r\n            <div>\r\n                <Button disabled={this.state.favorite} href=\"/favorite-movies\" type=\"primary\" onClick={this.onChangeAddFavorite}>\r\n                    AÃ±adir a favoritas\r\n                </Button> \r\n                <Button disabled={!this.state.favorite} href=\"/favorite-movies\" type=\"danger\" onClick={this.onChangeRemoveFavorite}>\r\n                    Quitar de favoritas\r\n                </Button>   \r\n                <MovieDetail movie={this.state.movie} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieDetailView;","import React, { Component } from \"react\";\r\nimport MovieList from \"../Components/MovieList\";\r\n\r\nclass FavoriteMovies extends Component {\r\n    constructor(state){\r\n        super(state)\r\n        this.state = {\r\n            movies: []\r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        var values = []\r\n        var keys = Object.keys(localStorage)\r\n        var i = keys.length;\r\n        while ( i-- ) {\r\n            values.push(JSON.parse(localStorage.getItem(keys[i])));\r\n        }\r\n        if (values) {\r\n            this.setState({movies: values});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return  (\r\n            <div>\r\n                <MovieList data={this.state.movies} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FavoriteMovies;","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { Layout, Menu } from 'antd';\r\nimport logo from '../Assets/movie.png';\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst { Header } = Layout;\r\n\r\nclass CustomLayout extends Component{\r\n    render(){\r\n        return (\r\n            <Layout className=\"layout\">\r\n                <Header>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" style={{ lineHeight: '64px' }}>\r\n                        <Menu.Item><Link to=\"/\"><img alt=\"Movie\" src={logo} height=\"40px\" /></Link></Menu.Item>\r\n                        <Menu.Item key=\"1\"><Link to=\"/\">Buscador de PelÃ­culas</Link></Menu.Item>\r\n                        <Menu.Item key=\"2\"><Link to=\"/favorite-movies\">Favoritas</Link></Menu.Item>\r\n                    </Menu>\r\n                </Header>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CustomLayout;","import React from 'react';\r\nimport {Route,Switch} from 'react-router-dom';\r\nimport MovieList from './Containers/MovieListView';\r\nimport MovieDetail from './Containers/MovieDetailView';\r\nimport FavoriteMovies from './Containers/FavoriteMovies';\r\nimport CustomLayout from './Containers/Layout';\r\nimport { HashRouter } from 'react-router-dom'; \r\n\r\nconst BaseRouter = () => (\r\n    <div>\r\n        <HashRouter basename='/'>\r\n            <CustomLayout />\r\n            <br />\r\n            <Switch>\r\n                <Route exact path='/Movie-Finder/' component={MovieList} />\r\n                <Route exact path='/Movie-Finder/favorite-movies' component={FavoriteMovies} />\r\n                <Route exact path='/Movie-Finder/:movieID' component={MovieDetail} />\r\n            </Switch>\r\n        </HashRouter>\r\n    </div>\r\n);\r\n\r\nexport default BaseRouter;","import React, { Component } from 'react';\r\nimport BaseRouter from './routes';\r\n\r\nclass App extends Component {  \r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <BaseRouter />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}